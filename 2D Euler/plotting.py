# Standard Python Libraries
import os
import numpy as np
import datetime
from time import time, sleep
import matplotlib.pyplot as plt
import matplotlib.animation as animation

# User Defined Libraries
import configuration as cfg      # Input Parameters

def plot_prim(q_sys,t):
    '''
    Function Name:      plot_prim
    Creator:            Carolyn Wendeln
    Date Created:       02-15-2023
    Date Last Modified: 03-25-2024

    Definition:         plot_prim plots the primative variables for the Euler Equaitons

    Inputs:             q_sys: conserved variables
                        t: current time step

    Outputs:            image of all primative variables

    Dependencies:       none
    '''

    rho = q_sys[0]
    u   = q_sys[1] / q_sys[0]
    v   = q_sys[2] / q_sys[0]
    p   = (cfg.gamma - 1.) * (q_sys[3] - (0.5 * q_sys[0] * ((u)**2. + (v)**2.)))
    
    fig, plots = plt.subplots(2, 2, gridspec_kw={'width_ratios': [1, 1], 'wspace': 0.0}, figsize=(10, 10))

    fig.suptitle('Solution at t = %.3f' % t)

    im1 = plots[0][0].imshow(rho, cmap='viridis', extent=[0, 1, 0, 1],origin='lower')
    plots[0][0].set_ylabel('y')
    plots[0][0].set_title('Density')
    cbar1 = fig.colorbar(im1, ax=plots[0][0])
    cbar1.set_label(' ')

    im2 = plots[0][1].imshow(p, cmap='viridis', extent=[0, 1, 0, 1],origin='lower')
    plots[0][1].set_yticklabels([])
    plots[0][1].set_title('Pressure')
    cbar2 = fig.colorbar(im2, ax=plots[0][1])
    cbar2.set_label(' ')

    im3 = plots[1][0].imshow(u, cmap='viridis', extent=[0, 1, 0, 1],origin='lower')
    plots[1][0].set_xlabel('x')
    plots[1][0].set_ylabel('y')
    plots[1][0].set_title('X Velocity')
    cbar3 = fig.colorbar(im3, ax=plots[1][0])
    cbar3.set_label(' ')

    im4 = plots[1][1].imshow(v, cmap='viridis',extent=[0,1,0,1],origin='lower')
    plots[1][1].set_xlabel('x')
    plots[1][1].set_yticklabels([])
    plots[1][1].set_title('Y Velocity')
    cbar4 = fig.colorbar(im4, ax=plots[1][1])
    cbar4.set_label(' ')

    fig.subplots_adjust(wspace=0.2, hspace=0.3)

    plt.show()

def plot_den_contour(q_sys,t):

    rho = q_sys[0]
    fig = plt.figure(figsize=(7,7), dpi=100)
    plt.imshow(rho,extent=[0,1,0,1],origin='lower')
    plt.title('Density at t = %.3f' % t)
    contour = plt.contour(rho,extent=[0,1,0,1], cmap='turbo', levels=25)
    plt.clabel(contour, inline=False, fontsize=12, colors = 'black')

    plt.show()

def plot_1D(q_sys,t):
    '''
    Function Name:      plot_1D
    Creator:            Carolyn Wendeln
    Date Created:       02-15-2023
    Date Last Modified: 05-01-2023

    Definition:         plot_1D plots the pressure, density, velocity, and
                        total energy for the Euler Equaitons

    Inputs:             q_sys: conserved variables
                        t: current time step

    Outputs:            image of the solution at given time step

    Dependencies:       none
    '''

    # 1D Sod Shock Tube
    if cfg.case == 16 or cfg.case == 17:
        exact_grid = np.array([0.0, 0.002, 0.004, 0.006, 0.008, 0.01, 0.012, 0.014, 0.016, 0.018, 0.02, 0.022, 0.024, 0.026, 0.028, 0.03, 0.032, 0.034, 0.036, 0.038, 0.04, 0.042, 0.044, 0.046, 0.048, 0.05, 0.052, 0.054, 0.056, 0.058, 0.06, 0.062, 0.064, 0.066, 0.068, 0.07, 0.072, 0.074, 0.076, 0.078, 0.08, 0.082, 0.084, 0.086, 0.088, 0.09, 0.092, 0.094, 0.096, 0.098, 0.1, 0.102, 0.104, 0.106, 0.108, 0.11, 0.112, 0.114, 0.116, 0.118, 0.12, 0.122, 0.124, 0.126, 0.128, 0.13, 0.132, 0.134, 0.136, 0.138, 0.14, 0.142, 0.144, 0.146, 0.148, 0.15, 0.152, 0.154, 0.156, 0.158, 0.16, 0.162, 0.164, 0.166, 0.168, 0.17, 0.172, 0.174, 0.176, 0.178, 0.18, 0.182, 0.184, 0.186, 0.188, 0.19, 0.192, 0.194, 0.196, 0.198, 0.2, 0.202, 0.204, 0.206, 0.208, 0.21, 0.212, 0.214, 0.216, 0.218, 0.22, 0.222, 0.224, 0.226, 0.228, 0.23, 0.232, 0.234, 0.236, 0.238, 0.24, 0.242, 0.244, 0.246, 0.248, 0.25, 0.252, 0.254, 0.256, 0.258, 0.26, 0.262, 0.264, 0.266, 0.268, 0.27, 0.272, 0.274, 0.276, 0.278, 0.28, 0.282, 0.284, 0.286, 0.288, 0.29, 0.292, 0.294, 0.296, 0.298, 0.3, 0.302, 0.304, 0.306, 0.308, 0.31, 0.312, 0.314, 0.316, 0.318, 0.32, 0.322, 0.324, 0.326, 0.328, 0.33, 0.332, 0.334, 0.336, 0.338, 0.34, 0.342, 0.344, 0.346, 0.348, 0.35, 0.352, 0.354, 0.356, 0.358, 0.36, 0.362, 0.364, 0.366, 0.368, 0.37, 0.372, 0.374, 0.376, 0.378, 0.38, 0.382, 0.384, 0.386, 0.388, 0.39, 0.392, 0.394, 0.396, 0.398, 0.4, 0.402, 0.404, 0.406, 0.408, 0.41, 0.412, 0.414, 0.416, 0.418, 0.42, 0.422, 0.424, 0.426, 0.428, 0.43, 0.432, 0.434, 0.436, 0.438, 0.44, 0.442, 0.444, 0.446, 0.448, 0.45, 0.452, 0.454, 0.456, 0.458, 0.46, 0.462, 0.464, 0.466, 0.468, 0.47, 0.472, 0.474, 0.476, 0.478, 0.48, 0.482, 0.484, 0.486, 0.488, 0.49, 0.492, 0.494, 0.496, 0.498, 0.5, 0.502, 0.504, 0.506, 0.508, 0.51, 0.512, 0.514, 0.516, 0.518, 0.52, 0.522, 0.524, 0.526, 0.528, 0.53, 0.532, 0.534, 0.536, 0.538, 0.54, 0.542, 0.544, 0.546, 0.548, 0.55, 0.552, 0.554, 0.556, 0.558, 0.56, 0.562, 0.564, 0.566, 0.568, 0.57, 0.572, 0.574, 0.576, 0.578, 0.58, 0.582, 0.584, 0.586, 0.588, 0.59, 0.592, 0.594, 0.596, 0.598, 0.6, 0.602, 0.604, 0.606, 0.608, 0.61, 0.612, 0.614, 0.616, 0.618, 0.62, 0.622, 0.624, 0.626, 0.628, 0.63, 0.632, 0.634, 0.636, 0.638, 0.64, 0.642, 0.644, 0.646, 0.648, 0.65, 0.652, 0.654, 0.656, 0.658, 0.66, 0.662, 0.664, 0.666, 0.668, 0.67, 0.672, 0.674, 0.676, 0.678, 0.68, 0.682, 0.684, 0.686, 0.688, 0.69, 0.692, 0.694, 0.696, 0.698, 0.7, 0.702, 0.704, 0.706, 0.708, 0.71, 0.712, 0.714, 0.716, 0.718, 0.72, 0.722, 0.724, 0.726, 0.728, 0.73, 0.732, 0.734, 0.736, 0.738, 0.74, 0.742, 0.744, 0.746, 0.748, 0.75, 0.752, 0.754, 0.756, 0.758, 0.76, 0.762, 0.764, 0.766, 0.768, 0.77, 0.772, 0.774, 0.776, 0.778, 0.78, 0.782, 0.784, 0.786, 0.788, 0.79, 0.792, 0.794, 0.796, 0.798, 0.8, 0.802, 0.804, 0.806, 0.808, 0.81, 0.812, 0.814, 0.816, 0.818, 0.82, 0.822, 0.824, 0.826, 0.828, 0.83, 0.832, 0.834, 0.836, 0.838, 0.84, 0.842, 0.844, 0.846, 0.848, 0.85, 0.852, 0.854, 0.856, 0.858, 0.86, 0.862, 0.864, 0.866, 0.868, 0.87, 0.872, 0.874, 0.876, 0.878, 0.88, 0.882, 0.884, 0.886, 0.888, 0.89, 0.892, 0.894, 0.896, 0.898, 0.9, 0.902, 0.904, 0.906, 0.908, 0.91, 0.912, 0.914, 0.916, 0.918, 0.92, 0.922, 0.924, 0.926, 0.928, 0.93, 0.932, 0.934, 0.936, 0.938, 0.94, 0.942, 0.944, 0.946, 0.948, 0.95, 0.952, 0.954, 0.956, 0.958, 0.96, 0.962, 0.964, 0.966, 0.968, 0.97, 0.972, 0.974, 0.976, 0.978, 0.98, 0.982, 0.984, 0.986, 0.988, 0.99, 0.992, 0.994, 0.996, 0.998, 1.0])
        exact_rho = np.array
        exact_u = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008235519, 0.019346631, 0.030457742, 0.041568853, 0.052679964, 0.063791075, 0.074902186, 0.086013297, 0.097124408, 0.108235519, 0.119346631, 0.130457742, 0.141568853, 0.152679964, 0.163791075, 0.174902186, 0.186013297, 0.197124408, 0.208235519, 0.219346631, 0.230457742, 0.241568853, 0.252679964, 0.263791075, 0.274902186, 0.286013297, 0.297124408, 0.308235519, 0.319346631, 0.330457742, 0.341568853, 0.352679964, 0.363791075, 0.374902186, 0.386013297, 0.397124408, 0.408235519, 0.419346631, 0.430457742, 0.441568853, 0.452679964, 0.463791075, 0.474902186, 0.486013297, 0.497124408, 0.508235519, 0.519346631, 0.530457742, 0.541568853, 0.552679964, 0.563791075, 0.574902186, 0.586013297, 0.597124408, 0.608235519, 0.619346631, 0.630457742, 0.641568853, 0.652679964, 0.663791075, 0.674902186, 0.686013297, 0.697124408, 0.708235519, 0.719346631, 0.730457742, 0.741568853, 0.752679964, 0.763791075, 0.774902186, 0.786013297, 0.797124408, 0.808235519, 0.819346631, 0.830457742, 0.841568853, 0.852679964, 0.863791075, 0.874902186, 0.886013297, 0.897124408, 0.908235519, 0.919346631, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.92745262, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
        exact_p = np.array
        exact_E = np.array
    
    # Reverse of 1D Sod Shock Tube 
    elif cfg.case == 18 or cfg.case == 19:
        exact_grid = np.array([0.0, 0.002, 0.004, 0.006, 0.008, 0.01, 0.012, 0.014, 0.016, 0.018, 0.02, 0.022, 0.024, 0.026, 0.028, 0.03, 0.032, 0.034, 0.036, 0.038, 0.04, 0.042, 0.044, 0.046, 0.048, 0.05, 0.052, 0.054, 0.056, 0.058, 0.06, 0.062, 0.064, 0.066, 0.068, 0.07, 0.072, 0.074, 0.076, 0.078, 0.08, 0.082, 0.084, 0.086, 0.088, 0.09, 0.092, 0.094, 0.096, 0.098, 0.1, 0.102, 0.104, 0.106, 0.108, 0.11, 0.112, 0.114, 0.116, 0.118, 0.12, 0.122, 0.124, 0.126, 0.128, 0.13, 0.132, 0.134, 0.136, 0.138, 0.14, 0.142, 0.144, 0.146, 0.148, 0.15, 0.152, 0.154, 0.156, 0.158, 0.16, 0.162, 0.164, 0.166, 0.168, 0.17, 0.172, 0.174, 0.176, 0.178, 0.18, 0.182, 0.184, 0.186, 0.188, 0.19, 0.192, 0.194, 0.196, 0.198, 0.2, 0.202, 0.204, 0.206, 0.208, 0.21, 0.212, 0.214, 0.216, 0.218, 0.22, 0.222, 0.224, 0.226, 0.228, 0.23, 0.232, 0.234, 0.236, 0.238, 0.24, 0.242, 0.244, 0.246, 0.248, 0.25, 0.252, 0.254, 0.256, 0.258, 0.26, 0.262, 0.264, 0.266, 0.268, 0.27, 0.272, 0.274, 0.276, 0.278, 0.28, 0.282, 0.284, 0.286, 0.288, 0.29, 0.292, 0.294, 0.296, 0.298, 0.3, 0.302, 0.304, 0.306, 0.308, 0.31, 0.312, 0.314, 0.316, 0.318, 0.32, 0.322, 0.324, 0.326, 0.328, 0.33, 0.332, 0.334, 0.336, 0.338, 0.34, 0.342, 0.344, 0.346, 0.348, 0.35, 0.352, 0.354, 0.356, 0.358, 0.36, 0.362, 0.364, 0.366, 0.368, 0.37, 0.372, 0.374, 0.376, 0.378, 0.38, 0.382, 0.384, 0.386, 0.388, 0.39, 0.392, 0.394, 0.396, 0.398, 0.4, 0.402, 0.404, 0.406, 0.408, 0.41, 0.412, 0.414, 0.416, 0.418, 0.42, 0.422, 0.424, 0.426, 0.428, 0.43, 0.432, 0.434, 0.436, 0.438, 0.44, 0.442, 0.444, 0.446, 0.448, 0.45, 0.452, 0.454, 0.456, 0.458, 0.46, 0.462, 0.464, 0.466, 0.468, 0.47, 0.472, 0.474, 0.476, 0.478, 0.48, 0.482, 0.484, 0.486, 0.488, 0.49, 0.492, 0.494, 0.496, 0.498, 0.5, 0.502, 0.504, 0.506, 0.508, 0.51, 0.512, 0.514, 0.516, 0.518, 0.52, 0.522, 0.524, 0.526, 0.528, 0.53, 0.532, 0.534, 0.536, 0.538, 0.54, 0.542, 0.544, 0.546, 0.548, 0.55, 0.552, 0.554, 0.556, 0.558, 0.56, 0.562, 0.564, 0.566, 0.568, 0.57, 0.572, 0.574, 0.576, 0.578, 0.58, 0.582, 0.584, 0.586, 0.588, 0.59, 0.592, 0.594, 0.596, 0.598, 0.6, 0.602, 0.604, 0.606, 0.608, 0.61, 0.612, 0.614, 0.616, 0.618, 0.62, 0.622, 0.624, 0.626, 0.628, 0.63, 0.632, 0.634, 0.636, 0.638, 0.64, 0.642, 0.644, 0.646, 0.648, 0.65, 0.652, 0.654, 0.656, 0.658, 0.66, 0.662, 0.664, 0.666, 0.668, 0.67, 0.672, 0.674, 0.676, 0.678, 0.68, 0.682, 0.684, 0.686, 0.688, 0.69, 0.692, 0.694, 0.696, 0.698, 0.7, 0.702, 0.704, 0.706, 0.708, 0.71, 0.712, 0.714, 0.716, 0.718, 0.72, 0.722, 0.724, 0.726, 0.728, 0.73, 0.732, 0.734, 0.736, 0.738, 0.74, 0.742, 0.744, 0.746, 0.748, 0.75, 0.752, 0.754, 0.756, 0.758, 0.76, 0.762, 0.764, 0.766, 0.768, 0.77, 0.772, 0.774, 0.776, 0.778, 0.78, 0.782, 0.784, 0.786, 0.788, 0.79, 0.792, 0.794, 0.796, 0.798, 0.8, 0.802, 0.804, 0.806, 0.808, 0.81, 0.812, 0.814, 0.816, 0.818, 0.82, 0.822, 0.824, 0.826, 0.828, 0.83, 0.832, 0.834, 0.836, 0.838, 0.84, 0.842, 0.844, 0.846, 0.848, 0.85, 0.852, 0.854, 0.856, 0.858, 0.86, 0.862, 0.864, 0.866, 0.868, 0.87, 0.872, 0.874, 0.876, 0.878, 0.88, 0.882, 0.884, 0.886, 0.888, 0.89, 0.892, 0.894, 0.896, 0.898, 0.9, 0.902, 0.904, 0.906, 0.908, 0.91, 0.912, 0.914, 0.916, 0.918, 0.92, 0.922, 0.924, 0.926, 0.928, 0.93, 0.932, 0.934, 0.936, 0.938, 0.94, 0.942, 0.944, 0.946, 0.948, 0.95, 0.952, 0.954, 0.956, 0.958, 0.96, 0.962, 0.964, 0.966, 0.968, 0.97, 0.972, 0.974, 0.976, 0.978, 0.98, 0.982, 0.984, 0.986, 0.988, 0.99, 0.992, 0.994, 0.996, 0.998, 1.0])
        exact_rho = np.array
        exact_u = np.array
        exact_p = np.array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.303130178, 0.306594911, 0.311399239, 0.316267951, 0.321201765, 0.326201405, 0.331267602, 0.336401092, 0.341602618, 0.346872931, 0.352212785, 0.357622946, 0.363104181, 0.368657268, 0.37428299, 0.379982136, 0.385755504, 0.391603897, 0.397528127, 0.40352901, 0.409607372, 0.415764044, 0.421999866, 0.428315683, 0.434712349, 0.441190724, 0.447751677, 0.454396083, 0.461124824, 0.46793879, 0.47483888, 0.481825997, 0.488901057, 0.496064978, 0.503318688, 0.510663124, 0.51809923, 0.525627956, 0.533250263, 0.540967117, 0.548779494, 0.556688377, 0.564694757, 0.572799635, 0.581004017, 0.58930892, 0.597715369, 0.606224394, 0.614837038, 0.623554351, 0.632377388, 0.641307218, 0.650344916, 0.659491563, 0.668748255, 0.67811609, 0.687596179, 0.697189641, 0.706897603, 0.716721203, 0.726661585, 0.736719903, 0.746897323, 0.757195017, 0.767614167, 0.778155964, 0.788821609, 0.799612312, 0.810529293, 0.821573781, 0.832747015, 0.844050242, 0.855484722, 0.86705172, 0.878752515, 0.890588394, 0.902560654, 0.914670602, 0.926919555, 0.939308841, 0.951839795, 0.964513767, 0.977332113, 0.990296202, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
        exact_E = np.array
        
    rho = q_sys[0]
    u   = q_sys[1] / q_sys[0]
    v   = q_sys[2] / q_sys[0]
    E  = q_sys[3] 
    p   = (cfg.gamma - 1.) * (q_sys[3] - (0.5 * q_sys[0] * ((u)**2. + (v)**2.)))

    fig, plots = plt.subplots(2, 2, figsize=(18, 6))

    fig.suptitle('Solution at t = %.3f' % t)

    plots[0][0].plot(exact_grid,exact_rho,color = 'gold', linestyle='-',linewidth=2.5,label='Exact Soln.')
    plots[0][0].plot(cfg.xgrid,rho,color = 'crimson', linestyle='-',linewidth=1.5,label='Approx.')
    plots[0][0].set_xlabel('x')
    plots[0][0].set_ylabel('Density')
    plots[0][0].legend()

    plots[0][1].plot(exact_grid,exact_u,color = 'gold', linestyle='-',linewidth=2.5,label='Exact Soln.')
    if cfg.case == 16 or cfg.case ==18:
        plots[0][1].plot(cfg.xgrid,u,color = 'crimson', linestyle='-',linewidth=1.5,label='Approx.')
    elif cfg.case == 17 or cfg.case == 19:
        plots[0][1].plot(cfg.xgrid,v,color = 'crimson', linestyle='-',linewidth=1.5,label='Approx.')
    plots[0][1].set_xlabel('x')
    plots[0][1].set_ylabel('Velocity')
    plots[0][1].legend()

    plots[1][0].plot(exact_grid,exact_p,color = 'gold', linestyle='-',linewidth=2.5,label='Exact Soln.')
    plots[1][0].plot(cfg.xgrid,p,color = 'crimson', linestyle='-',linewidth=1.5,label='Approx.')
    plots[1][0].set_xlabel('x')
    plots[1][0].set_ylabel('Pressure')
    plots[1][0].legend()

    plots[1][1].plot(exact_grid,exact_E*exact_rho,color = 'gold', linestyle='-',linewidth=2.5,label='Exact Soln.')
    plots[1][1].plot(cfg.xgrid,E,color = 'crimson', linestyle='-',linewidth=1.5,label='Approx.')
    plots[1][1].set_xlabel('x')
    plots[1][1].set_ylabel('Total Energy')
    plots[1][1].legend()

    plt.show()

def movie_maker(all_solns,all_t):
    '''
    Function Name:      movie_maker
    Creator:            Carolyn Wendeln
    Date Created:       02-15-2023
    Date Last Modified: 04-24-2023

    Definition:         movie_maker plots the primative variables for the Euler Equaitons

    Inputs:             all_solns: list of the solution at every time step
                        all_t: list of all the time steps

    Outputs:            movie labeled movie_title

    Dependencies:       none
    '''

    # Get the current date and time
    current_datetime = datetime.datetime.now()

    # Convert the datetime object to a string
    movie_title = current_datetime.strftime("%Y-%m-%d %H:%M:%S")

    movie_title = movie_title + ".mp4"

    # Create a figure and axis for plotting
    fig, plots = plt.subplots(2, 2, gridspec_kw={'width_ratios': [1, 1], 'wspace': 0.0})

    n_steps = len(all_t)

    q_sys = all_solns[0]

    rho = q_sys[0]
    u   = q_sys[1] / q_sys[0]
    v   = q_sys[2] / q_sys[0]
    p   = (cfg.gamma - 1.) * (q_sys[3] - (0.5 * q_sys[0] * ((u)**2. + (v)**2.)))

    fig.suptitle('Solution at t = %.3f' % all_t[0])

    im1 = plots[0][0].imshow(rho, cmap='viridis', extent=[0, 1, 0, 1],origin='lower')
    plots[0][0].set_ylabel('y')
    plots[0][0].set_title('Density')
    cbar1 = fig.colorbar(im1, ax=plots[0][0])
    cbar1.set_label(' ')

    im2 = plots[0][1].imshow(p, cmap='viridis', extent=[0, 1, 0, 1],origin='lower')
    plots[0][1].set_yticklabels([])
    plots[0][1].set_title('Pressure')
    cbar2 = fig.colorbar(im2, ax=plots[0][1])
    cbar2.set_label(' ')

    im3 = plots[1][0].imshow(u, cmap='viridis', extent=[0, 1, 0, 1],origin='lower')
    plots[1][0].set_xlabel('x')
    plots[1][0].set_ylabel('y')
    plots[1][0].set_title('X Velocity')
    cbar3 = fig.colorbar(im3, ax=plots[1][0])
    cbar3.set_label(' ')

    im4 = plots[1][1].imshow(v, cmap='viridis', extent=[0, 1, 0, 1],origin='lower')
    plots[1][1].set_xlabel('x')
    plots[1][1].set_yticklabels([])
    plots[1][1].set_title('Y Velocity')
    cbar4 = fig.colorbar(im4, ax=plots[1][1])
    cbar4.set_label(' ')

    fig.subplots_adjust(wspace=0.2, hspace=0.3)

    def animate(i):
        ''' function to update the plot for each frame  '''

        q_sys = all_solns[i]

        rho = q_sys[0]
        u   = q_sys[1] / q_sys[0]
        v   = q_sys[2] / q_sys[0]
        p   = (cfg.gamma - 1.) * (q_sys[3] - (0.5 * q_sys[0] * ((u)**2. + (v)**2.)))

        fig.suptitle('Solution at t = %.3f' % all_t[i])

        im1.set_array(rho)
        im1.set_clim(vmin=rho.min(), vmax=rho.max())

        im2.set_array(p)
        im2.set_clim(vmin=p.min(), vmax=p.max())

        im3.set_array(u)
        im3.set_clim(vmin=u.min(), vmax=u.max())

        im4.set_array(v)
        im4.set_clim(vmin=v.min(), vmax=v.max())

        fig.subplots_adjust(wspace=0.2, hspace=0.3)

    # Create the animation using matplotlib's FuncAnimation
    ani = animation.FuncAnimation(fig, animate, frames=n_steps, interval=100)

    folder_path = os.path.join(os.getcwd(), "animations")
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    file_path = os.path.join(folder_path, movie_title)

    print("Saving the Primative Plot...")
    # Save the animation as a video file
    
    ani.save(file_path,writer='ffmpeg', dpi=500)

def movie_maker_den(all_solns,all_t):
    '''
    Function Name:      movie_maker_den
    Creator:            Carolyn Wendeln
    Date Created:       02-15-2023
    Date Last Modified: 04-24-2023

    Definition:         movie_maker_den plots contour lines for the density for the Euler Equaitons

    Inputs:             all_solns: list of the solution at every time step
                        all_t: list of all the time steps

    Outputs:            movie labeled movie_title

    Dependencies:       none
    '''

    # Get the current date and time
    current_datetime = datetime.datetime.now()

    # Convert the datetime object to a string
    movie_title = current_datetime.strftime("%Y-%m-%d %H:%M:%S")

    movie_title = movie_title + ".mp4"

    # fig, ax = plt.figure(figsize=(8,8), dpi=100)
    # fig, ax = plt.subplots(figsize=(8,8), dpi=100)

    n_steps = len(all_t)

    q_sys = all_solns[0]

    rho = q_sys[0]

    fig, ax = plt.subplots()
    im1 = ax.imshow(rho,origin='lower')

    im1.axes.set_xticklabels([])
    im1.axes.set_yticklabels([])

    fig.colorbar(im1, ax=ax)

    contour_lines = ax.contour(rho,cmap='turbo', levels=25)

    contour_labels = plt.clabel(contour_lines, inline=False, fontsize=12, colors = 'black')

    for coll in contour_lines.collections:
        coll.remove()

    for coll in contour_labels:
        coll.remove()
        
    def animate(i):
        ''' Function to update the plot for each frame '''
        global contour_lines
        global contour_labels
        
        q_sys = all_solns[i]

        rho = q_sys[0]
        
        # Update the image
        im1.set_array(rho)
        im1.set_clim(vmin=rho.min(), vmax=rho.max())

        im1.axes.set_xticklabels([])
        im1.axes.set_yticklabels([])
        
        if 'contour_lines' not in globals():
            contour_lines = ax.contour(rho,cmap='turbo', levels=15)
        else:
            # Update the contour lines
            for coll in contour_lines.collections:
                coll.remove()
            contour_lines = ax.contour(rho,cmap='turbo', levels=15)

        if 'contour_labels' not in globals():
            contour_labels = plt.clabel(contour_lines, inline=False, fontsize=12, colors = 'black')
        else:
            for coll in contour_labels:
                coll.remove()
            contour_labels = plt.clabel(contour_lines, inline=False, fontsize=12, colors = 'black')

        # Update the title
        ax.set_title('Solution at t = %.3f' % all_t[i])

        return contour_lines

    # Create the animation using matplotlib's FuncAnimation
    ani = animation.FuncAnimation(fig, animate, frames=n_steps, interval=100)

    folder_path = os.path.join(os.getcwd(), "animations")
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    file_path = os.path.join(folder_path, movie_title)

    print("Saving the Contour Plot...")
    # Save the animation as a video file
    ani.save(file_path,writer='ffmpeg', dpi=500)




